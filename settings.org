* Melpa Packages
# load emacs 24's package system. Add MELPA repository.
#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   ;; '("melpa" . "http://stable.melpa.org/packages/") ; many packages won't show if using stable
   '("melpa" . "http://melpa.milkbox.net/packages/")
   t))

;; You might already have this line
(package-initialize)
;; list the packages you want
(defvar package-list)
(setq package-list '(async 
			auctex 
			auto-complete 
			autopair 
			clang-format 
			cmake-ide
            cmake-mode 
			company 
			company-irony
            company-irony-c-headers 
			dash 
			epl
			flycheck
            flycheck-irony
			flycheck-pyflakes 
            google-c-style 
			helm helm-core 
			helm-ctest
            helm-flycheck 
			helm-flyspell 
			helm-ls-git 
			helm-ls-hg
            irony 
			let-alist 
			levenshtein 
			magit 
			markdown-mode 
            popup 
			rtags 
			seq 
			solarized-theme 
			writegood-mode 
			yasnippet))
;; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))
;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

#+END_SRC

* General Settings
** Stop creating those backup files					
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) 
#+END_SRC
** We don't want to type yes and no all the time so, do y and n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Disable the auto-save
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC
# (menu-bar-mode -1)
** Turn-off toolbar
#+BEGIN_SRC emacs-lisp
(if window-system
    (tool-bar-mode 0))
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Disable buffer sounds
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore) 
#+END_SRC
** CUA keys
#+BEGIN_SRC emacs-lisp
(cua-mode 1)
#+END_SRC
** White Spaces
#+BEGIN_SRC emacs-lisp
(require 'whitespace)
#+END_SRC
** Tabs
#+BEGIN_SRC emacs-lisp
(defun my-insert-tab-char ()
  "Insert a tab char. (ASCII 9, \t)"
  (interactive)
  (insert "\t"))
(global-set-key (kbd "TAB") 'my-insert-tab-char) ; same as Ctrl+i
(setq cperl-invalid-face 'default)

;backtab
(global-set-key (kbd "<S-tab>") 'un-indent-by-removing-4-spaces)
(defun un-indent-by-removing-4-spaces ()
  "remove 4 spaces from beginning of of line"
  (interactive)
  (save-excursion
    (save-match-data
      (beginning-of-line)
      ;; get rid of tabs at beginning of line
      (when (looking-at "^\\s-+")
        (untabify (match-beginning 0) (match-end 0)))
      (when (looking-at "^    ")
        (replace-match "")))))

#+END_SRC
** Word wrap
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC
** Disable startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
      (setq initial-scratch-message ";; Happy Hacking")
#+END_SRC
** Line Numbers
#+BEGIN_SRC emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
#+END_SRC
** Mode Line (%)
#+BEGIN_SRC emacs-lisp

;; Set the modeline to tell me the filename, hostname, etc..
(setq-default mode-line-format
      (list " "
            ; */% indicators if the file has been modified
            'mode-line-modified
            "--"
            ; the name of the buffer (i.e. filename)
            ; note this gets automatically highlighted
            'mode-line-buffer-identification
            "--"
            ; major and minor modes in effect
            'mode-line-modes
            ; if which-func-mode is in effect, display which
            ; function we are currently in.
            '(which-func-mode ("" which-func-format "--"))
            ; line, column, file %
            'mode-line-position
            "--"
            ; if vc-mode is in effect, display version control
            ; info here
            `(vc-mode vc-mode)
            "--"
            ; hostname
            'system-name
            ; dashes sufficient to fill rest of modeline.
            "-%-"
            )
)

#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
;; Load helm and set M-x to helm, buffer to helm, and find files to herm
(require 'helm-config)
(require 'helm)
(require 'helm-ls-git)
(require 'helm-ctest)
;; Use C-c h for helm instead of C-x c
(global-set-key   (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(global-set-key   (kbd "M-x") 'helm-M-x)
(global-set-key   (kbd "C-x b") 'helm-mini)
(global-set-key   (kbd "C-x C-b") 'helm-buffers-list)
(global-set-key   (kbd "C-x C-f") 'helm-find-files)
(global-set-key   (kbd "C-c t") 'helm-ctest)
(setq
 helm-split-window-in-side-p           t
                                        ; open helm buffer inside current window,
                                        ; not occupy whole other window
 helm-move-to-line-cycle-in-source     t
                                        ; move to end or beginning of source when
                                        ; reaching top or bottom of source.
 helm-ff-search-library-in-sexp        t
                                        ; search for library in `require' and `declare-function' sexp.
 helm-scroll-amount                    8
                                        ; scroll 8 lines other window using M-<next>/M-<prior>
 helm-ff-file-name-history-use-recentf t
 ;; Allow fuzzy matches in helm semantic
 helm-semantic-fuzzy-match t
 helm-imenu-fuzzy-match    t)
;; Have helm automaticaly resize the window
(helm-autoresize-mode 1)
(setq rtags-use-helm t)
(require 'helm-flycheck) ;; Not necessary if using ELPA package
(eval-after-load 'flycheck
  '(define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck))
#+END_SRC

* Mac OS X Tweaks
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/bin"))
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/texbin")))
(setq exec-path (append exec-path '("/usr/bin")))
(setq exec-path (append exec-path '("/usr/local/bin")))

(when (eq system-type 'darwin)
    (setq ns-use-native-fullscreen nil)
    (setq mac-option-key-is-meta nil)
    (setq mac-command-key-is-meta t)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier nil)
    (setq ns-function-modifier 'hyper))

#+END_SRC
* NeoTree
(require 'neotree)
* C++
** Set Code Style
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4 c-default-style "linux")
(setq-default tab-width 4 indent-tabs-mode t)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
;; If for some reason you're not using CMake you can use a tool like
;; bear (build ear) to get a compile_commands.json file in the root
;; directory of your project. flycheck can use this as well to figure
;; out how to build your project. If that fails, you can also
;; manually include directories by add the following into a
;; ".dir-locals.el" file in the root directory of the project. You can
;; set any number of includes you would like and they'll only be
;; used for that project. Note that flycheck calls
;; "cmake CMAKE_EXPORT_COMPILE_COMMANDS=1 ." so if you should have
;; reasonable (working) defaults for all your CMake variables in
;; your CMake file.
;; (setq flycheck-clang-include-path (list "/path/to/include/" "/path/to/include2/"))
;;
;; With CMake, you might need to pass in some variables since the defaults
;; may not be correct. This can be done by specifying cmake-compile-command
;; in the project root directory. For example, I need to specify CHARM_DIR
;; and I want to build in a different directory (out of source) so I set:
;; ((nil . ((cmake-ide-build-dir . "../ParBuild/"))))
;; ((nil . ((cmake-compile-command . "-DCHARM_DIR=/Users/nils/SpECTRE/charm/"))))
;; You can also set arguments to the C++ compiler, I use clang so:
;; ((nil . ((cmake-ide-clang-flags-c++ . "-I/Users/nils/SpECTRE/Amr/"))))
;;
;; You can force cmake-ide-compile to compile in parallel by changing:
;; "make -C " to "make -j8 -C " in the cmake-ide.el file and then force
;; recompiling the directory using M-x byte-force-recompile
;; Require flycheck to be present
(require 'flycheck)
;; Force flycheck to always use c++11 support. We use
;; the clang language backend so this is set to clang
(add-hook 'c++-mode-hook
          (lambda ()
            (setq flycheck-clang-language-standard "c++11")
            )
          )
;; Turn flycheck on everywhere
(global-flycheck-mode)

;; Use flycheck-pyflakes for python. Seems to work a little better.
(require 'flycheck-pyflakes)

;; Load rtags and start the cmake-ide-setup process
(require 'rtags)
#+END_SRC
** Flyspell Mode for Spelling Corrections
#+BEGIN_SRC emacs-lisp
(require 'flyspell)
;; The welcome message is useless and can cause problems
(setq flyspell-issue-welcome-flag nil)
;; Fly spell keyboard shortcuts so no mouse is needed
;; Use helm with flyspell
(define-key flyspell-mode-map (kbd "<f8>") 'helm-flyspell-correct)
;; (global-set-key (kbd "<f8>")     'ispell-word)
(global-set-key    (kbd "C-S-<f8>") 'flyspell-mode)
(global-set-key    (kbd "C-M-<f8>") 'flyspell-buffer)
(global-set-key    (kbd "C-<f8>")   'flyspell-check-previous-highlighted-word)
(global-set-key    (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)
;; Set the way word highlighting is done
(defun flyspell-check-next-highlighted-word ()
  "Custom function to spell check next highlighted word."
  (interactive)
  (flyspell-goto-next-error)
  (ispell-word)
  )

;; Spell check comments in c++ and c common
(add-hook 'c++-mode-hook  'flyspell-prog-mode)
(add-hook 'c-mode-common-hook 'flyspell-prog-mode)

;; Enable flyspell in text mode
(if (fboundp 'prog-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (dolist (hook '(lisp-mode-hook 
		emacs-lisp-mode-hook 
		scheme-mode-hook
		clojure-mode-hook
		ruby-mode-hook 
		yaml-mode
		python-mode-hook 
		shell-mode-hook php-mode-hook
		css-mode-hook 
		haskell-mode-hook 
		caml-mode-hook
		nxml-mode-hook 
		crontab-mode-hook 
		perl-mode-hook
		tcl-mode-hook 
		javascript-mode-hook))
    (add-hook hook 'flyspell-prog-mode)))

(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))
#+END_SRC
** Company and Irony
#+BEGIN_SRC emacs-lisp
(require 'company)
(require 'company-rtags)
(global-company-mode)

;; Enable semantics mode for auto-completion
(require 'cc-mode)
(require 'semantic)
(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)
(semantic-mode 1)

;; Setup irony-mode to load in c-modes
(require 'irony)
(require 'company-irony-c-headers)
(require 'cl)
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

;; irony-mode hook that is called when irony is triggered
(defun my-irony-mode-hook ()
  "Custom irony mode hook to remap keys."
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))

(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

;; company-irony setup, c-header completions
(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
;; Remove company-semantic because it has higher precedance than company-clang
;; Using RTags completion is also faster than semantic, it seems. Semantic
;; also provides a bunch of technically irrelevant completions sometimes.
;; All in all, RTags just seems to do a better job.
(setq company-backends (delete 'company-semantic company-backends))
;; Enable company-irony and several other useful auto-completion modes
;; We don't use rtags since we've found that for large projects this can cause
;; async timeouts. company-semantic (after company-clang!) works quite well
;; but some knowledge some knowledge of when best to trigger is still necessary.
(eval-after-load 'company
  '(add-to-list
    'company-backends '(company-irony-c-headers
                        company-irony 
			company-yasnippet
                        company-clang 
			company-rtags)
    )
  )

(defun my-disable-semantic ()
  "Disable the company-semantic backend."
  (interactive)
  (setq company-backends (delete '(company-irony-c-headers
                                   company-irony 
				   company-yasnippet
                                   company-clang 
				   company-rtags
                                   company-semantic) 
				   company-backends))
  (add-to-list
   'company-backends '(company-irony-c-headers
                       	company-irony 
			company-yasnippet
                       	company-clang 
			company-rtags))
  )
(defun my-enable-semantic ()
  "Enable the company-semantic backend."
  (interactive)
  (setq company-backends (delete '(company-irony-c-headers
                                   company-irony 
				   company-yasnippet
                                   company-clang) 
				   company-backends))
  (add-to-list
   'company-backends '(company-irony-c-headers
                        company-irony 
			company-yasnippet 
			company-clang))
  )

;; Zero delay when pressing tab
(setq company-idle-delay 0)
(define-key c-mode-map [(C-tab)] 'company-complete)
(define-key c++-mode-map [(C-tab)] 'company-complete)
;; Delay when idle because I want to be able to think without
;; completions immediately being called and slowing me down.
(setq company-idle-delay 0.2)

;; Prohibit semantic from searching through system headers. We want
;; company-clang to do that for us.
(setq-mode-local c-mode semanticdb-find-default-throttle
                 '(local project unloaded recursive))
(setq-mode-local c++-mode semanticdb-find-default-throttle
                 '(local project unloaded recursive))

(semantic-remove-system-include "/usr/include/" 'c++-mode)
(semantic-remove-system-include "/usr/local/include/" 'c++-mode)
(add-hook 'semantic-init-hooks
          'semantic-reset-system-include)

;; rtags Seems to be really slow sometimes so I disable using
;; it with irony mode
;; (require 'flycheck-rtags)
;; (defun my-flycheck-rtags-setup ()
;;   (flycheck-select-checker 'rtags)
;;   ;; RTags creates more accurate overlays.
;;   (setq-local flycheck-highlighting-mode nil)
;;   (setq-local flycheck-check-syntax-automatically nil))
;; ;; c-mode-common-hook is also called by c++-mode
;; (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)

;; (eval-after-load 'flycheck
;;   '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

;; Add flycheck to helm
(require 'helm-flycheck) ;; Not necessary if using ELPA package
(eval-after-load 'flycheck
  '(define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck))
#+END_SRC
** Cmake-ide
#+BEGIN_SRC emacs-lisp
(require 'cmake-ide)
(cmake-ide-setup)
;; Set cmake-ide-flags-c++ to use C++11
(setq cmake-ide-flags-c++ (append '("-std=c++11")))
;; We want to be able to compile with a keyboard shortcut
(global-set-key (kbd "C-c m") 'cmake-ide-compile)
;; Set rtags to enable completions and use the standard keybindings.
;; A list of the keybindings can be found at:
;; http://syamajala.github.io/c-ide.html
(setq rtags-autostart-diagnostics t)
(rtags-diagnostics)
(setq rtags-completions-enabled t)
(rtags-enable-standard-keybindings)
(setq cmake-ide-build-dir "build/")
#+END_SRC
** Cmake-mode
#+BEGIN_SRC emacs-lisp
(require 'cmake-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load c++-mode when opening charm++ interface files
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'auto-mode-alist '("\\.ci\\'" . c++-mode))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
;; To get a bunch of extra snippets that come in super handy see:
;; https://github.com/AndreaCrotti/yasnippet-snippets
;; or use:
;; git clone https://github.com/AndreaCrotti/yasnippet-snippets.git ~/.emacs.d/yassnippet-snippets/
(add-to-list 'yas-snippet-dirs "~/.emacs.d/yasnippet-snippets/")
(yas-global-mode 1)
(yas-reload-all)
#+END_SRC
* TODO Magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-g M-s") 'magit-status)
(global-set-key (kbd "M-g M-c") 'magit-checkout)
#+END_SRC
* Org-mode
** Source Code Syntax
#+BEGIN_SRC emacs-lisp
	
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (C . t)
   (emacs-lisp . t)
   (haskell . t)
   (gnuplot . t)
   (latex . t)
   (js . t)
   (haskell . t)
   (python . t)
   ;; (gnuplot . t)
  ))


(setq org-src-fontify-natively t)
(setq org-startup-with-inline-images t)

;; avoid open link in other frames
(setq org-link-frame-setup (quote ((vm . vm-visit-folder-other-frame)
				   (vm-imap . vm-visit-imap-folder-other-frame)
				   (gnus . org-gnus-no-new-news)
				   (file . find-file)
				   (wl . wl-other-frame))))
#+END_SRC
** Add TODO keyword
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
  '((sequence 
	"TODO"
      	"MAYBE"
      	"NEXT"
      	"STARTED"
      	"WAITING"
      	"DELEGATED"
      	"|"
      	"DONE"
      	"DEFERRED"
      	"CANCELLED")
	))

(setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "red" :weight bold))
        ("MAYBE" . (:foreground "brown" :weight bold))
	("NEXT" . (:foreground "blue" :weight bold))
	("STARTED" . (:foreground "green" :weight bold))
	("WAITING" . (:foreground "blue" :weight bold))
        ("DEFERRED" . (:foreground "purple" :weight bold))
	("DELEGATED" . (:foreground "orange" :weight bold))
	("|" . (:foreground "green" :weight bold))
	("DONE" . (:foreground "forest green" :weight bold))
	("DEFERRED" . (:foreground "orange" :weight bold))
	("CANCELLED" . (:foreground "forest red" :weight bold))
        ))

#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
;;latex
(defun set-exec-path-from-shell-PATH ()
  "Sets the exec-path to the same value used by the user shell"
  (let ((path-from-shell
         (replace-regexp-in-string
          "[[:space:]\n]*$" ""
          (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

;; call function now
(set-exec-path-from-shell-PATH)
(setq org-latex-default-packages-alist (cons '("mathletters" "ucs" nil) org-latex-default-packages-alist))
#+END_SRC
* Dirtree
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/dirtree")
(autoload 'dirtree "dirtree" "Add directory to tree view" t)
(require 'dirtree)
#+END_SRC
* Markdown
#+BEGIN_SRC emacs-lisp

(require 'markdown-mode)
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(custom-set-variables
 '(markdown-command "/usr/local/bin/pandoc"))

#+END_SRC
